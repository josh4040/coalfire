terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      #version = "~> 4.0"
    }
  }
}

provider "aws" {
  region                   = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
  profile                  = "customprofile"
}

resource "aws_vpc" "coalfire_vpc" {
  cidr_block           = "10.1.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "Coalfire-vpc"
  }
}

resource "aws_subnet" "public_subnet_1" {
  vpc_id                  = aws_vpc.coalfire_vpc.id
  cidr_block              = "10.1.0.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true
  tags = {
    Name = "Sub1"
  }
}

resource "aws_subnet" "public_subnet_2" {
  vpc_id                  = aws_vpc.coalfire_vpc.id
  cidr_block              = "10.1.1.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true
  tags = {
    Name = "Sub2"
  }
}

resource "aws_subnet" "private_subnet_1" {
  vpc_id            = aws_vpc.coalfire_vpc.id
  cidr_block        = "10.1.2.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "Sub3"
  }
}

resource "aws_subnet" "private_subnet_2" {
  vpc_id            = aws_vpc.coalfire_vpc.id
  cidr_block        = "10.1.3.0/24"
  availability_zone = "us-east-1b"
  tags = {
    Name = "Sub4"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.coalfire_vpc.id
  tags = {
    Name = "coalfire-gw"
  }
}

resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.coalfire_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
  tags = {
    Name = "public_rt"
  }
}

resource "aws_route_table_association" "public_route_association_1" {
  subnet_id      = aws_subnet.public_subnet_1.id
  route_table_id = aws_route_table.public_route_table.id
}

resource "aws_route_table_association" "public_route_association_2" {
  subnet_id      = aws_subnet.public_subnet_2.id
  route_table_id = aws_route_table.public_route_table.id
}

resource "aws_security_group" "allow_http" {
  vpc_id      = aws_vpc.coalfire_vpc.id
  name        = "PublicSecurityGroup"
  description = "Security group for public instances"

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
    ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "private_access" {
  vpc_id      = aws_vpc.coalfire_vpc.id
  name        = "PrivateSecurityGroup"
  description = "Security group for private instances"

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  // Allow communication between instances in private subnets
  ingress {
    from_port = 0
    to_port   = 65535
    protocol  = "tcp"
  }
}

resource "aws_instance" "ec2_instance" {
  ami           = "ami-026ebd4cfe2c043b2"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.public_subnet_2.id
  key_name      = "coalfire-key-pair"
  root_block_device {
    volume_size = 20
  }
  security_groups = [aws_security_group.allow_http.id]
  tags = {
    Name = "RedHat-Public_Sub2"
  }
  user_data = <<EOF
        #!/bin/bash
        sudo yum upgrade -y
        sudo yum install -y httpd
        sudo systemctl start httpd
        echo “<h2>Coalfire from IP: $(hostname -f)COALFIRE Public Subnet Webserver” > /var/www/html/index.html
        EOF

}

# Create an auto scaling group (ASG) that spreads instances across subnets sub3 and sub4
resource "aws_launch_configuration" "web-lc" {
  name_prefix     = "Coalfire-launch"
  image_id        = "ami-026ebd4cfe2c043b2"
  instance_type   = "t2.micro"
  key_name        = "coalfire-key-pair"
  security_groups = [aws_security_group.private_access.id]
  user_data       = <<-EOF
                    #!/bin/bash
                    sudo yum upgrade -y
                    sudo yum install -y httpd
                    sudo systemctl start httpd
                    echo “<h2>Coalfire from IP: $(hostname -f)COALFIRE Private Subnet Webserver” > /var/www/html/index.html
                    EOF

  root_block_device {
    volume_size = 20
  }

  lifecycle {
    create_before_destroy = true
  }
}


resource "aws_autoscaling_group" "asg" {
  name                 = "CoalfireASG"
  launch_configuration = aws_launch_configuration.web-lc.id
  min_size             = 2
  max_size             = 6
  desired_capacity     = 2
  vpc_zone_identifier  = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id]
}

resource "aws_lb" "alb" {
  name               = "Coalfire-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.allow_http.id]
  subnets            = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]
}

resource "aws_lb_target_group" "coalfire-tg" {
  name = "Coalfire-alb-tg"
  #target_type = "alb"
  port                 = 80
  protocol             = "HTTP"
  vpc_id               = aws_vpc.coalfire_vpc.id
  deregistration_delay = 300
}

resource "aws_autoscaling_attachment" "asg_attachment" {
  autoscaling_group_name = aws_autoscaling_group.asg.id
  lb_target_group_arn    = aws_lb_target_group.coalfire-tg.arn
}

resource "aws_lb_listener" "alb_listener" {
  load_balancer_arn = aws_lb.alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.coalfire-tg.arn
  }
}

# S3 Bucket
resource "aws_s3_bucket" "app_bucket" {
  bucket = "coalfire-test-bucket123" # Replace with your desired bucket name
}

resource "aws_s3_bucket_lifecycle_configuration" "lifecycle_configuration" {
  rule {
    id     = "images-rule"
    status = "Enabled"
    prefix = "Images/"
    transition {
      days          = 90
      storage_class = "GLACIER"
    }
  }

  rule {
    id     = "logs-rule"
    status = "Enabled"
    prefix = "Logs/"
    expiration {
      days = 90
    }
  }

  bucket = aws_s3_bucket.app_bucket.id
}
